// <auto-generated />
using System;
using DataAccess.EntitiesRepostory;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(MpsDbContext))]
    [Migration("20250707072124_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime>("BirthDay")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("BranchId")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("EmployeeWorkId")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Picture")
                        .HasColumnType("longtext");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SgkRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<uint>("ShipYardId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("TcNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime>("WorkStartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeWorkId");

                    b.HasIndex("ShipYardId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeeExit", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<byte>("AveragePoint")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("ContinuityAveragePoint")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("EmployeeId")
                        .HasColumnType("int unsigned");

                    b.Property<string>("EmployeeProjects")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExitNote")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("JabTrackingAveragePoint")
                        .HasColumnType("tinyint unsigned");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("TeamWorkAveragePoint")
                        .HasColumnType("tinyint unsigned");

                    b.Property<DateTime>("WorkFinishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("WorkStartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeExits");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeePoint", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<byte>("AveragePoint")
                        .HasColumnType("tinyint unsigned");

                    b.Property<byte>("ContinuityPoint")
                        .HasColumnType("tinyint unsigned");

                    b.Property<uint>("EmployeeId")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("GiveDateFinish")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("GiveDateStart")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("JabTrackingPoint")
                        .HasColumnType("tinyint unsigned");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("TeamWorkPoint")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserNameGivePoint")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeePoints");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeeProject", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<uint>("BranchId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("EmployeeId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("EmployeeWorkId")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("ManagerUserId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("ProjectId")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmployeeWorkId");

                    b.HasIndex("ManagerUserId");

                    b.ToTable("EmployeeProjects");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeeWork", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("WorkDetay")
                        .HasColumnType("longtext");

                    b.Property<string>("WorkName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EmployeeWork");

                    b.HasData(
                        new
                        {
                            Id = 1u,
                            CreateTime = new DateTime(2025, 7, 7, 10, 21, 23, 724, DateTimeKind.Local).AddTicks(7947),
                            CreateUser = "System",
                            IsDelete = false,
                            IsWork = true,
                            ModifiedTime = new DateTime(2025, 7, 7, 10, 21, 23, 724, DateTimeKind.Local).AddTicks(7940),
                            ModifiedUserName = "System",
                            ReallyDeleted = false,
                            WorkDetay = "Atolyede ön imalat yapan usta",
                            WorkName = "İmalat Ustası"
                        },
                        new
                        {
                            Id = 2u,
                            CreateTime = new DateTime(2025, 7, 7, 10, 21, 23, 724, DateTimeKind.Local).AddTicks(7951),
                            CreateUser = "System",
                            IsDelete = false,
                            IsWork = true,
                            ModifiedTime = new DateTime(2025, 7, 7, 10, 21, 23, 724, DateTimeKind.Local).AddTicks(7951),
                            ModifiedUserName = "System",
                            ReallyDeleted = false,
                            WorkDetay = "Atolyede ön imalat yapan ustanın yardımcısı",
                            WorkName = "İmalat Ustası Yardımcısı"
                        },
                        new
                        {
                            Id = 3u,
                            CreateTime = new DateTime(2025, 7, 7, 10, 21, 23, 724, DateTimeKind.Local).AddTicks(7954),
                            CreateUser = "System",
                            IsDelete = false,
                            IsWork = true,
                            ModifiedTime = new DateTime(2025, 7, 7, 10, 21, 23, 724, DateTimeKind.Local).AddTicks(7953),
                            ModifiedUserName = "System",
                            ReallyDeleted = false,
                            WorkDetay = "Atolyede Kaynak yapan usta",
                            WorkName = "Kaynakçı "
                        },
                        new
                        {
                            Id = 4u,
                            CreateTime = new DateTime(2025, 7, 7, 10, 21, 23, 724, DateTimeKind.Local).AddTicks(7956),
                            CreateUser = "System",
                            IsDelete = false,
                            IsWork = true,
                            ModifiedTime = new DateTime(2025, 7, 7, 10, 21, 23, 724, DateTimeKind.Local).AddTicks(7955),
                            ModifiedUserName = "System",
                            ReallyDeleted = false,
                            WorkDetay = "Gemiye Montaj yapan usta",
                            WorkName = "Montaj Ustası "
                        });
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.ScoreCard", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("EmployeeId")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<ushort>("ShiftHour")
                        .HasColumnType("smallint unsigned");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("ScoreCard");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SingleEntity.OtomaticSystemCode", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("HashValue")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<uint>("ManuelId")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value1")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Value2")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OtomaticSystemCodes");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SingleEntity.Stock", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<ushort>("Amount")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ExitTime")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("ForProjectId")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<uint>("No")
                        .HasColumnType("int unsigned");

                    b.Property<float>("Price")
                        .HasColumnType("float");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SenderName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Branch", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<string>("BranchDetay")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.CircutSystem", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("ProjectId")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("CircutSystems");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Project", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ProjectFinishTime")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("ProjectManagerId")
                        .HasMaxLength(50)
                        .HasColumnType("int unsigned");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ProjectStartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("ShipYardId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("TotalSpoolCount")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("ProjectManagerId")
                        .IsUnique();

                    b.HasIndex("ShipYardId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.ShipYard", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ShipYardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ShipYards");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Spool", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<bool>("AssemblyOur")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("CircutSystemId")
                        .HasColumnType("int unsigned");

                    b.Property<ushort>("Diameter")
                        .HasColumnType("smallint unsigned");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<ushort>("No")
                        .HasColumnType("smallint unsigned");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("SendingLocation")
                        .HasColumnType("tinyint unsigned");

                    b.Property<string>("SpoolName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<float>("TotalKg")
                        .HasColumnType("float");

                    b.Property<bool>("WorkPlaceOur")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte>("spoolStatus")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CircutSystemId");

                    b.ToTable("Spools");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolAssembly", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<uint>("AssemblyEmployeeId")
                        .HasColumnType("int unsigned");

                    b.Property<ushort>("AssemblyKg")
                        .HasColumnType("smallint unsigned");

                    b.Property<DateTime>("AssemblyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("SpoolId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyEmployeeId");

                    b.HasIndex("SpoolId")
                        .IsUnique();

                    b.ToTable("SpoolAssemblies");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolNavigator", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<uint>("CircutSystemId")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("ProjectId")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("SpoolAssemblyId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SpoolId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SpoolWorkShopAssemblyId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("SpoolWorkShopWeldingId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("CircutSystemId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SpoolAssemblyId")
                        .IsUnique();

                    b.HasIndex("SpoolId")
                        .IsUnique();

                    b.HasIndex("SpoolWorkShopAssemblyId")
                        .IsUnique();

                    b.HasIndex("SpoolWorkShopWeldingId")
                        .IsUnique();

                    b.ToTable("SpoolNavigators");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopAssembly", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<uint>("AssemblyEmployeeId")
                        .HasColumnType("int unsigned");

                    b.Property<ushort>("AssemblyKg")
                        .HasColumnType("smallint unsigned");

                    b.Property<DateTime>("AssemblyTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<uint>("SpoolId")
                        .HasColumnType("int unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AssemblyEmployeeId");

                    b.HasIndex("SpoolId")
                        .IsUnique();

                    b.ToTable("SpoolWorkShopAssembly");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopWelding", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("QualityTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime(6)");

                    b.Property<uint>("SpoolId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("WeldingEmployeeId")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("WeldingTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("SpoolId")
                        .IsUnique();

                    b.HasIndex("WeldingEmployeeId");

                    b.ToTable("SpoolWorkShopWelding");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.UsersData.EmployeeUser", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<uint>("Id"));

                    b.Property<uint>("BranchId")
                        .HasColumnType("int unsigned");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreateUser")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<uint>("EmployeeId")
                        .HasColumnType("int unsigned");

                    b.Property<uint>("EmployeeWorkId")
                        .HasColumnType("int unsigned");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsWork")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastBackUpId")
                        .HasColumnType("int");

                    b.Property<string>("Linkedin")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedUserName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("EmployeeWorkId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("EmployeeUsers");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.UsersData.MpsRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "b6e988d4-fe11-4a49-b12a-c68d08519820",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            ReallyDeleted = false
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "86a7fe02-8d6f-4dc8-81aa-4ef16c3b2544",
                            Name = "Manager",
                            NormalizedName = "MANAGER",
                            ReallyDeleted = false
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "3e463592-c373-4295-8d8b-84f4cfcd0171",
                            Name = "WorkShopManager",
                            NormalizedName = "WORKSHOPMANAGER",
                            ReallyDeleted = false
                        },
                        new
                        {
                            Id = "4",
                            ConcurrencyStamp = "0d31271f-c49b-44f3-8cbf-1a8488dcb653",
                            Name = "WorkShopEmployee",
                            NormalizedName = "WORKSHOPEMPLOYEE",
                            ReallyDeleted = false
                        },
                        new
                        {
                            Id = "5",
                            ConcurrencyStamp = "84779cec-0485-4e09-9b6a-d00e6eacb4e5",
                            Name = "TallyClerk",
                            NormalizedName = "TALLYCLERK",
                            ReallyDeleted = false
                        },
                        new
                        {
                            Id = "6",
                            ConcurrencyStamp = "b062f90a-f3cc-4cfd-9b73-1c89e4015df6",
                            Name = "ChefEngineer",
                            NormalizedName = "CHEFENGINEERR",
                            ReallyDeleted = false
                        },
                        new
                        {
                            Id = "7",
                            ConcurrencyStamp = "a1553b67-5ff0-46a9-950f-372045dcfdd0",
                            Name = "Engineer",
                            NormalizedName = "ENGINEER",
                            ReallyDeleted = false
                        },
                        new
                        {
                            Id = "8",
                            ConcurrencyStamp = "26ebfcf8-8713-4567-8c56-7b73178319a6",
                            Name = "Stock",
                            NormalizedName = "STOCK",
                            ReallyDeleted = false
                        },
                        new
                        {
                            Id = "9",
                            ConcurrencyStamp = "6cd5298e-e963-49f6-8cfd-d4890e8a48fd",
                            Name = "TrackingUser",
                            NormalizedName = "TRACKİNGUSER",
                            ReallyDeleted = false
                        });
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.UsersData.MpsUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordBackUp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReallyDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("UseForPersonel")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeeWork", "EmployeeWork")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.ShipYard", "ShipYard")
                        .WithMany("Employees")
                        .HasForeignKey("ShipYardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("EmployeeWork");

                    b.Navigation("ShipYard");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeeExit", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", "Employee")
                        .WithMany("EmployeeExits")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeePoint", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", "Employee")
                        .WithMany("EmployeePoints")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeeProject", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", "Employee")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Branch", "Branch")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Project", "Project")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeeWork", "EmployeeWork")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("EmployeeWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.UsersData.EmployeeUser", "ManagerUser")
                        .WithMany("EmployeeProjects")
                        .HasForeignKey("ManagerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeWork");

                    b.Navigation("ManagerUser");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.ScoreCard", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", "Employee")
                        .WithMany("ScoreCard")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.CircutSystem", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Project", "Project")
                        .WithMany("CircutSystem")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Project", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.UsersData.EmployeeUser", "ProjectManager")
                        .WithOne("Project")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Project", "ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.ShipYard", "ShipYard")
                        .WithMany("Projects")
                        .HasForeignKey("ShipYardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectManager");

                    b.Navigation("ShipYard");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Spool", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.CircutSystem", "CircutSystem")
                        .WithMany("Spools")
                        .HasForeignKey("CircutSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CircutSystem");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolAssembly", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", "AssemblyEmployee")
                        .WithMany("SpoolShipYardAssembly")
                        .HasForeignKey("AssemblyEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Spool", "Spool")
                        .WithOne("SpoolAssembly")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolAssembly", "SpoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssemblyEmployee");

                    b.Navigation("Spool");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolNavigator", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.CircutSystem", "CircutSystem")
                        .WithMany("SpoolNavigators")
                        .HasForeignKey("CircutSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Project", "Project")
                        .WithMany("SpoolNavigators")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolAssembly", "SpoolAssembly")
                        .WithOne("SpoolNavigator")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolNavigator", "SpoolAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Spool", "Spool")
                        .WithOne("SpoolNavigator")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolNavigator", "SpoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopAssembly", "SpoolWorkShopAssembly")
                        .WithOne("SpoolNavigator")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolNavigator", "SpoolWorkShopAssemblyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopWelding", "SpoolWorkShopWelding")
                        .WithOne("SpoolNavigator")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolNavigator", "SpoolWorkShopWeldingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CircutSystem");

                    b.Navigation("Project");

                    b.Navigation("Spool");

                    b.Navigation("SpoolAssembly");

                    b.Navigation("SpoolWorkShopAssembly");

                    b.Navigation("SpoolWorkShopWelding");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopAssembly", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", "AssemblyEmployee")
                        .WithMany("SpoolWorkShopAssembly")
                        .HasForeignKey("AssemblyEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Spool", "Spool")
                        .WithOne("SpoolWorkShopAssembly")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopAssembly", "SpoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssemblyEmployee");

                    b.Navigation("Spool");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopWelding", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Spool", "Spool")
                        .WithOne("SpoolWorkShopWelding")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopWelding", "SpoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", "WeldingEmployee")
                        .WithMany("SpoolWorkShopWelding")
                        .HasForeignKey("WeldingEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spool");

                    b.Navigation("WeldingEmployee");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.UsersData.EmployeeUser", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Branch", "Branch")
                        .WithMany("EmployeeUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", "Employee")
                        .WithOne("EmployeeUser")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.UsersData.EmployeeUser", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeeWork", "EmployeeWork")
                        .WithMany("EmployeeUsers")
                        .HasForeignKey("EmployeeWorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.UsersData.MpsUser", "User")
                        .WithOne("EmployeeUser")
                        .HasForeignKey("Core.Concrete.Entities.DataBaseTable.UsersData.EmployeeUser", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeWork");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.UsersData.MpsRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.UsersData.MpsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.UsersData.MpsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.UsersData.MpsRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Concrete.Entities.DataBaseTable.UsersData.MpsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Concrete.Entities.DataBaseTable.UsersData.MpsUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.Employee", b =>
                {
                    b.Navigation("EmployeeExits");

                    b.Navigation("EmployeePoints");

                    b.Navigation("EmployeeProjects");

                    b.Navigation("EmployeeUser");

                    b.Navigation("ScoreCard");

                    b.Navigation("SpoolShipYardAssembly");

                    b.Navigation("SpoolWorkShopAssembly");

                    b.Navigation("SpoolWorkShopWelding");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.EmployeeData.EmployeeWork", b =>
                {
                    b.Navigation("EmployeeProjects");

                    b.Navigation("EmployeeUsers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Branch", b =>
                {
                    b.Navigation("EmployeeProjects");

                    b.Navigation("EmployeeUsers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.CircutSystem", b =>
                {
                    b.Navigation("SpoolNavigators");

                    b.Navigation("Spools");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Project", b =>
                {
                    b.Navigation("CircutSystem");

                    b.Navigation("EmployeeProjects");

                    b.Navigation("SpoolNavigators");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.ShipYard", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.Spool", b =>
                {
                    b.Navigation("SpoolAssembly");

                    b.Navigation("SpoolNavigator");

                    b.Navigation("SpoolWorkShopAssembly");

                    b.Navigation("SpoolWorkShopWelding");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolAssembly", b =>
                {
                    b.Navigation("SpoolNavigator");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopAssembly", b =>
                {
                    b.Navigation("SpoolNavigator");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.SpoolTracking.SpoolWorkShopWelding", b =>
                {
                    b.Navigation("SpoolNavigator");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.UsersData.EmployeeUser", b =>
                {
                    b.Navigation("EmployeeProjects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Core.Concrete.Entities.DataBaseTable.UsersData.MpsUser", b =>
                {
                    b.Navigation("EmployeeUser");
                });
#pragma warning restore 612, 618
        }
    }
}
